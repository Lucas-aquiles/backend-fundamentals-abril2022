// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Por defecto, todos los campos tienen la restricci√≥n NOT NULL

model User {
  id Int @id @default(autoincrement())
  name String @db.VarChar(45)
  email String @unique @db.VarChar(45)
  password String @db.VarChar(61)
  birthday DateTime @db.Date
  role Role @default(NORMAL)
  active Boolean @default(true)
  activeOrder Int?
  orders Order[]
  address Address?
}

model Address{
  id Int @id @default(autoincrement())
  country String
  state String
  city String
  street String
  number Int
  zipCode Int
  user User @relation(fields: [userID],references: [id], onDelete: Cascade)
  userID Int @unique
}

enum Role{
  NORMAL
  ADMIN
}

model Food{
  id Int @id @default(autoincrement())
  name String @db.VarChar(45)
  price Float
  description String
  image String
  categories FoodCategories[]
  orders FoodOrder[]
}

model Category{
  id Int @id @default(autoincrement())
  name String
  food FoodCategories[]
}

model FoodCategories {
  // fields: Campos de esta tabla
  // references: Crea una referencia a un campo de otra tabla
  food Food @relation(fields: [foodID], references: [id], onDelete: Cascade)
  foodID Int
  category Category @relation(fields:[categoryID],references: [id], onDelete: Cascade)
  categoryID Int

  @@id([foodID,categoryID])
}

model Order{
  id Int @id @default(autoincrement())
  completed Boolean @default(false)
  user User @relation(fields: [userID], references: [id], onDelete: Cascade)
  userID Int
  food FoodOrder[]
}

model FoodOrder{
  food Food @relation(fields: [foodID],references: [id], onDelete: Cascade)
  foodID Int
  order Order @relation(fields: [orderID], references: [id], onDelete: Cascade)
  orderID Int
  @@id([foodID,orderID])
}